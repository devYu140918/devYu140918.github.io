{"meta":{"title":"鱼儿游","subtitle":null,"description":null,"author":"YUEX","url":"","root":"/"},"pages":[{"title":"friends","date":"2019-06-20T03:55:00.000Z","updated":"2019-06-20T03:55:00.496Z","comments":true,"path":"friends/index.html","permalink":"/friends/index.html","excerpt":"","text":""},{"title":"about","date":"2019-06-20T03:53:42.000Z","updated":"2019-06-20T03:53:42.550Z","comments":true,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":""},{"title":"projects","date":"2019-06-20T03:54:42.000Z","updated":"2019-06-20T03:54:42.092Z","comments":true,"path":"projects/index.html","permalink":"/projects/index.html","excerpt":"","text":""}],"posts":[{"title":"答辩述职","slug":"答辩述职","date":"2019-07-04T01:56:18.000Z","updated":"2019-07-17T10:36:32.540Z","comments":true,"path":"2019/07/答辩述职/","link":"","permalink":"/2019/07/答辩述职/","excerpt":"","text":"述职演讲 &emsp;&emsp;各位领导大家好，我是***，今年5月5号入职，到现在已经两个月了。非常感谢各位领导能在百忙之中抽出宝贵的时间看我的转正述职报告，也很荣幸能够成为公司的一员。现对试用期工作内容，分以下三个部分做出总结。 &emsp;&emsp;第一部分，试用期工作计划。这一部分是由导师根据具体岗位要求制定，试用期内大体是按照这个计划来执行的。 &emsp;&emsp;第二部分，试用期工作内容。这一部分对试用期的工作内容做一个简单的概括。 &emsp;&emsp;第三部分，试用期工作成果。这一部分对试用期的工作成果进行概括。 &emsp;&emsp;最后对试用期工作心得做一个简单的分享，提出一些项目中存在的问题，并给出个人优化建议。 &emsp;&emsp;试用期工作计划，总共分为八周，前四周以学习密码学，PKI，各种安全算法，掌握各种算法在java中的运用。后四周以学习MAuth产品，理解产品各业务流程，熟悉项目源代码，完成导师安排的开发任务为主。 &emsp;&emsp;我试用期工作内容总结为以下几点点： &emsp;&emsp;1、学习Java安全机制，Java加密体系和java加密扩展。 &emsp;&emsp;2、学习安全算法，主要分为 编码算法（BASE64,URLEncode），摘要算法(MD，SHA，mac)，对称/非对称密码算法（des，aes，idea，blowfish，rc2,rc4/rsa,ecdh,ecc），数字签名算法（RSA,DSA,ECDSA） &emsp;&emsp;3、学习数字证书的管理和SSL安全协议。 &emsp;&emsp;4、MAuth产品的学习，从项目文档入手，搭建开发环境，从接口到代码捋清业务流程。 &emsp;&emsp;5、熟悉一期项目需求和代码，梳理一期项目接口，编写接口文档。熟悉二期需求，做项目准备工作。 &emsp;&emsp;工作成果分为三部分， &emsp;&emsp;第一部分、编码实践，使用各安全算法，对数据进行加密与解密，摘要计算，数字签名和签名验证。学习了SSL安全协议，利用证书搭建Https单向认证和双向认证服务。 &emsp;&emsp;第二部分、搭建了MAuth开发环境，熟悉了证书和令牌的相关业务操作流程，利用移动令牌和移动证书app进行了实践操作。熟悉了二维码扫码登录流程。熟悉了PDF签章业务流程。利用VISO绘制了产品各业务流程的流程图。 &emsp;&emsp;第三部分、农信二期项目准备，阅读了项目一期的工程源码，结合一期的文档熟悉具体业务。梳理了一期项目对外提供的接口，调用的内部NetPass接口以及调用外部接口，形成接口文档。结合二期需求，确定二期项目改造内容，对比现有的几个项目，选择以OCMS项目为基础，将其转换为maven工程，作为后端管理平台的模板。 &emsp;&emsp;试用期工作心得和建议，在前四周学习密码学，算法使用等还比较顺利，在熟悉产品的过程中，遇到了一些问题，导师长时间在外出差，我开始一个人慢慢摸索，尝试代码注释，配置文件和产品说明文档，产品需求文档，一步步寻找答案。一些理解不确定的，不知道地方，利用中午吃饭时间向同事请教。在这个过程中不断加深对产品的理解。 &emsp;&emsp;在阅读源代码的过程中也发现了一些问题: &emsp;&emsp;1、存在大量相同或者类似的代码逻辑，甚至有一些是重复的，大多数是参数校验逻辑（建议封装一个通用模块，针对参数校验，通用化。加入统一异常处理。这样可以减少大量重复参数校验逻辑和异常处理逻辑） &emsp;&emsp;2、有些复杂的逻辑缺乏注释（PDF签章流程，由几个接口协同处理，PDF上传之后，仅仅只是保存到服务器上，然后返回了一个包含uuid的二维码，在获取getPdfUrl、getPdfData、getPdfDataCooper的时候，才会对pdf进行摘要处理，这中间过程的数据都是保存在内存里面的【pdf上传记录，如果中间过程出现异常，需要重新上传(不合理)】）摘要计算的时候比较隐蔽，且与上传接口存在关联，需要做一下说明，帮助理解。 &emsp;&emsp;3、关于代码规范的一点建议，Alibaba发布最新的代码规范，并提供的了eclipse和Interlij idea的插件，可以帮助我们扫描项目代码是否符合规范，并给出修改建议。 问题1：农信项目是干什么的？答：农信项目，农信统一硬件认证平台以身份认证和交易安全为核心，通过网银系统对接动态令牌，实现电子支付认证渠道的统一，用户只需要开通动态令牌，同时签约对应渠道，就可以同时在网银和手机银行系统中使用动态令牌，不需要维护多个硬件认证介质。在功能上提供身份认证及令牌管理，统计，查询功能，报表导出。 问题2：SSL安全协议握手流程是什么样子的？答：ssl安全协议，分为两层， 记录层协议–记录包含 Connection States，数据分片，记录压缩和解压缩，载荷保护。 握手协议：握手协议包含，密钥交换协议，告警协议，和握手交互协议（Client Hello… ） 第一步由 客户端发起 Client Hello，携带 32位Randon1，支持的协议版，加密套件，sessionid，压缩算法，扩展等。 第二步 服务端响应 Server Hello ，server_version 协议版本，服务端32位随机数Random2，sessionid，加密套件，压缩算法，扩展 第三步 服务端发送 Server Certificate，发送服务端证书或证书链， 第四步 server Key Exchange ，密钥算法参数，签名参数， 第五步 可选，服务端请求客户端发送客户端证书（证书链） 第六步， 事件消息 Server hello done，通知客户端服务端密钥交换完成，收到这个消息之后，客户端需要验证服务端证书，在必要情况下验证密钥交换参数。 第七步 Client Certificate 客户端响应服务端要求，发送客户端证书或证书链 第八步 Client Key Exchange 密钥算法参数， Encryption PreMaster Secret 构建预主密钥，使用服务端公钥加密 使用 RSA算法构建时，客户端随机数Random3，TLS1.2 是48位随机数 使用 DH算法构建时，椭圆曲线参数 dh_yc，Random3，65位长度的公钥参数密钥到这里就协商好了，客户端和服务端都有了这三个参数 第九步 Certificate Verify 客户端对 从握手开始到当前消息之前的所有数据 客户端使用客户端私钥对前面所有的握手消息做签名hash，然后将原文和数据发送给服务端，服务端验证签名，确认客户端身份 第十步 Finished 客户端将前面的握手消息生成摘要，再用协商好的密钥加密，这就是客户端发送的第一条加密消息，服务端接收后会用密钥解密，能解密出来说明前面协商的出来的密钥是一致 问题3：证书的申请下载流程讲一下证书申请分为三个步骤，第一步、获取uuid，第二步、获取两码，参考号，授权码，第三步是下载。与CA交互三次。之所以有这么多步是当时的业务场景决定的，用户去银行办理ukey，银行会给客户参考码和授权码，用户拿着这两个码，用自己的电脑回去下载，这里可以避嫌，如果客户端从银行直接拿到一个带证书密钥的ukey，很难之后有没有被备份。 问题4：证书里面有哪些东西？答：证书里面有证书版本，证书签发者信息，证书拥有者信息，证书有效期，证书签名，签名算法，证书序列号，证书公钥，公钥算法，扩展。DN是用户唯一标识，SN证书序列号,证书发生换证时，DN不会变化，而SN是不同的。 问题5：单向认证和双向认证有什么区别？答：单项认证，一般是指客户端验证服务端身份，需要服务端提供服务端证书，客户端用CA证书验证服务端证书有效性。双向认证在单向认证的基础上，增加了客户端认证，服务端验证客户端身份，需要客户端提供证书给服务端，有服务端验证客户端身份。 *问题6：服务器是如何验证客户端身份的 *答：第一步服务器验证客户端证书有效性，（主要验证证书是否过期，验证证书签名，证书是否被吊销），CA使用私钥对客户端证书做了签名。服务器那CA公钥验证签名。CRL证书吊销列表不定期发布，OSP实时同步查询验证接口。签名的作用有两个，一个是防篡改，另一个的验证身份合法性。 问题7：说一下PDF签章？答：PDF签章，客户端上传PDF文件，服务端保存文件数据，客户端获取PDF摘要数据，这个摘要有服务端计算返回，客户端对摘要做签名，作为参数请求，签章后的PDF，服务端调用签章接口，合并得到签章好的PDF，客户端下载PDF，签章结束。 问题8：二维码扫码登录流程？二维码扫码登录，涉及到三个接口，第一个是获取生成的二维码，MAuth本地生成，参数是业务标识+随机数+时间戳第二个是扫码登录，客户端扫码，确认登录，携带原始二维码数据和签名。服务端验证，更新用户登录状态第三个是登录状态查询，第三个服务器，通过接口轮训，确认客户端登录状态。 问题9：令牌是怎么计算的？令牌有计算 有几个因子， 1、事件因子，2、时间因子（客户端时间和服务端时间，有时需要校对一致），3、种子（就是安全随机数），客户端和服务端通过特定的公式，使用上述几个因子，参与运算得出一个值。比较客户端和服务端计算的结果是否相同，来认证用户。 问题10：怎么把eclipse项目转换成maven项目？使用java api读取jar文件的Manifest属性，通过BuildName和version，查询maven仓库接口，得到groupid，artifactid，version，生成xml配置。 问题11：这个项目一期做了哪些东西，二期需求增加了哪些内容？项目，一期实现了，硬件新增绑定，更换，解绑，令牌同步/解锁，令牌开机重置，手机银行销户，认证硬件查询，收费信息查询，客户端签约详细查询，客户端绑定贴膜卡，客户端认证，认证响应，客户端令牌同步，客户端解绑贴膜卡，电子银行平台，认证硬件状态变更 新增了，一些报表统计类，令牌发放统计，用户认证硬件绑定关系查询，用户认证硬件使用情况查询，活跃客户信息查询，交易明细查询。定时任务管理，厂商管理，数据同步管理，定时任务定时同步交易流水，同步认证硬件订单流水，同步认证硬件入库，同步认证硬件调拨 总结起来就是统计查询类开发任务，定时任务管理，与定时任务逻辑。厂商信息管理 问题12：你这管理后台模板的确定，你是怎么考虑的？答：我对比两套代码，两套代码的结构差不多了，OCMS是以springMVC为基础，分层结构，按照业务逻辑类型分包。是比较典型的javaee项目。MAuth采用的strust2，strust2目前爆出来的漏洞比较多，考虑到安全问题，放弃使用。其他的技术基本都差不多。 问题13：证书类型有哪些？答：CSR证书请求，p12,pfx带私钥的证书，cer、der，p7b,p10公钥证书，格式不太一样。自签名双向认证服务，服务端需要配置两个证书，配置服务端证书，证书信任库。客户端需要导入两个证书，客户端证书、CA证书（p12带私钥的证书）。","categories":[],"tags":[]},{"title":"DB2安装使用笔记","slug":"DB2安装使用笔记","date":"2019-06-25T07:42:02.000Z","updated":"2019-06-25T08:36:53.742Z","comments":true,"path":"2019/06/DB2安装使用笔记/","link":"","permalink":"/2019/06/DB2安装使用笔记/","excerpt":"","text":"DB2下载安装&emsp;&emsp;因为项目需要，开始接触DB2数据库，首先是下载安装db2 express C版。在IBM的官网上找了好长时间，下载还需要注册申请，好麻烦的说。网上也有一些blog给出了一些下载地址，需要注册使用，只有express c是工开发学习免费使用的。目前版本11.1 express c，下载链接链接：https://pan.baidu.com/s/1V9AbAXx6qBPkF9fiVOFQyQ 提取码：wdqh ，需要的下载从速，若链接失效不能保证及时更新，请谅解。 &emsp;&emsp;安装过程根据引导一步步来就可以了，建议将自己新建文件夹，将安装过程需要配置路径的地方，都配置成自己的新建好的目录。参考：在windown下安装DB2-Express-C 这里并没有完全按照这篇blog说的来操作，在配置管理服务器用户信息这一步，使用的本地系统账户。 配置连接使用&emsp;&emsp;由于这里安装使用的本地系统账户，因此登录数据库使用的用户名和密码就是当前windows登录使用的用户名和密码。其他情况自行探索。安装完成之后，以管理员权限运行cmd，执行 db2cmd 打开db2控制台。 开始创建数据库： 1234567891011121314db2 create database test简单数据操作,客户端链接方式，DB2使用 DbVisualizer 10.0.20 工具进行连接，//删除数据库：db2 drop database test//停止所有的应用链接 db2 force applications all//控制台连接到db2数据库 db2 CONNECT TO test创建缓冲池：db2 CREATE BUFFERPOOL UAP_1_0_POOL SIZE 5000 PAGESIZE 16384","categories":[],"tags":[{"name":"数据库","slug":"数据库","permalink":"/tags/数据库/"}]},{"title":"MAuth学习分析笔记","slug":"MAuth学习分析笔记","date":"2019-06-20T06:40:56.000Z","updated":"2019-07-02T02:05:04.969Z","comments":true,"path":"2019/06/MAuth学习分析笔记/","link":"","permalink":"/2019/06/MAuth学习分析笔记/","excerpt":"","text":"MAuth简介&emsp;&emsp;MAuth移动统一认证平台系统，是一套完整的移动身份认证解决方案。包含管理后台MAuthManage、移动认证服务MAuthServer两个核心。外部依赖数据库，CA服务器，Netpass令牌服务器，单点登录服务，NetSeal签章服务。 &emsp;&emsp;管理后台系统软件结构图如下： &emsp;&emsp;主要提供管理和统计报表服务，主要由系统管理员使用，管理用户、证书，令牌。审核用户、证书、令牌。报表统计和日志管理。 系统结构&emsp;&emsp;系统架构描述了与其周边相关服务的关联关系，MAuth移动统一认证管理平台系统架构图如下： &emsp;&emsp;目前学习的MAuthServer 为 V3.1.0.12版本。MAuth系统在实际应用场景中，位于客户业务系统之前，主要提供安全认证，证书管理，令牌管理，签名，签名验证服务。 核心业务流程描述证书服务 证书申请下载 &emsp;&emsp;为移动设备提供下载移动证书服务 业务处理流程如下图： &emsp;&emsp;证书申请下载请求由客户端发起，经过一系列的校验，通过之后，开始于CA进行交互。 正常流程，需要与CA交互三次。 第一步，根据用户名获取UUID，CertManger.applyUser() 第二步，获取REFNO和AUTHCODE两码，CertManager.requestCert() 第三步，下载证书，CertManager.downCert() 异常流程还需要，对原始证书进行作废。CertManager.revokeCert() 因此需要与CA交互四次。 p10： &emsp;&emsp;p10证书一般是一个base64文件，实际上他不是一张真正的证书应该是一段可以向CA申请证书的P10请求，该请求一般是通过硬件生成密钥对后，将私钥单独存放，但是将公钥放入p10中，CA受到该p10请求后，可以校验，并根据p10中的信息制作一张没有私钥的公钥证书，p10 即公钥数据。 证书内容 1234567891011121314151617181920212223242526272829303132333435363738Certificate: Data: Version: 3 (0x2) Serial Number: 14270177914825791894 (0xc609db34f6d0d996) Signature Algorithm: sha1WithRSAEncryption Issuer: C=CN, ST=WH, L=WH, O=yueryou, OU=yueryou, CN=*.yueryou.science Validity Not Before: Jun 20 08:55:36 2019 GMT Not After : Jun 17 08:55:36 2029 GMT Subject: C=CN, ST=WH, L=WH, O=yueryou, OU=yueryou, CN=*.yueryou.science Subject Public Key Info: Public Key Algorithm: rsaEncryption Public-Key: (1024 bit) Modulus: 00:f0:9f:9a:3e:bf:9a:93:d4:b9:1a:84:7e:27:ac: 73:85:5f:a4:c1:cd:7f:bb:e8:64:eb:09:6e:36:db: c1:68:6a:45:cc:c4:06:ff:f6:cd:b4:8b:6c:d6:6d: b7:6a:b0:1b:fa:95:71:82:0f:2d:24:90:7f:25:ad: 2d:84:f5:e0:f7:b1:4e:9c:de:60:54:b9:a8:71:41: 2e:7f:56:47:66:f5:99:55:30:52:db:bb:50:f0:a1: 1f:be:f3:d1:95:cb:dd:cf:d7:1a:44:18:ca:f2:26: 3c:59:8e:b5:f4:56:57:3d:27:c8:b2:23:c2:41:28: 8f:63:ef:9b:d8:30:bd:5c:73 Exponent: 65537 (0x10001) X509v3 extensions: X509v3 Basic Constraints: CA:FALSE X509v3 Key Usage: Digital Signature, Non Repudiation, Key Encipherment Signature Algorithm: sha1WithRSAEncryption c8:e2:b9:36:32:f9:a4:a1:94:d7:79:75:a2:64:19:f6:79:71: 24:4e:c7:b5:ce:b8:8e:5e:ea:e3:6f:93:64:eb:aa:a5:d7:78: eb:e0:77:f2:c3:9c:5a:0b:21:06:a8:f0:12:5d:e7:92:31:28: 10:ad:12:a7:44:6a:1c:76:11:b5:ca:79:09:d0:c4:bf:b1:d8: 4a:8b:51:27:56:44:90:92:67:6d:0b:5a:eb:5a:b0:51:97:40: 01:f7:9b:7b:35:95:a4:34:08:9d:68:f5:4e:b5:3e:0e:67:d6: 08:4d:3b:97:43:bd:96:47:0f:33:2c:27:c1:53:07:5e:9d:82: c9:18 &emsp;&emsp;证书主要内容有：1.证书拥有者，2.证书发布者，3.证书序列号，4.证书有效期开始结束日期，5.证书签名，6.签名算法，7.证书版本，9公钥，8.其他扩展信息 CA证书的重要属性（DN、SN、参考号、授权号、有效日期、证书状态、颁发者） DN： 用户唯一标识（Distinct Name,DN串内容：C标识国家代码，ST标识省份，L标识城市，O标识组织代码，OU组织类型企业或个人，CN标识域名） SN： 证书序列号证书序列号是证书的唯一标识。和DN的区别是，当发生换证、补发情况时，DN是相同的，而SN是不同的。 参考号和授权码，这两个字段用在证书下载过程中。 证书状态有：未下载、激活、冻结和注销。 颁发者，是证书的签发证书DN，在证书验证过程中需要验证该属性 证书冻结解冻 &emsp;&emsp;证书冻结和证书作废基本差不多，唯一的区别是，证书作废之后，证书就被吊销了，只能重新申请新的证书，原来的证书无法使用。而证书冻结后，可以进行解冻，解冻后的证书依然有效且可以正常使用。 证书冻结和解冻都需要和CA进行一次交互即可。 证书作废 &emsp;&emsp;证书因为以下某种原因需要作废处理的： 证书持有者改变，无权使用 证书持有者的密钥已遭到破环或者证书介质丢失，或者怀疑密钥泄露，为避免遭受损失 证书持有者本人不想使用该证书 证书签发者CA的密钥已被破坏或到期失效 证书签发CA决定作废证书 CA会通过CRL定期发布出去 二维码扫码登录 扫码登录流程 跨角色泳道图 二维码登录流程说明： MAuth系统位于客户业务系统之前，客户端系统为验证用户身份， 第一步、请求获取验证身份的二维码， 第二步、用户通过手机扫描二维码，确认登录时会发送原始数据加签名信息到MAuthServer，进行签名验证。 第三步、客户服务异步请求查询用户登录状态，若登录成功则用户身份确认通过。 PDF签章 签章注册 &emsp;&emsp;用户申请注册签章信息，需要提供用户信息，组织信息，印章图片，图片签名，印模名称（个人或企业）。 签章注册流程图如下所示： 签章服务由 NetSeal提供，itextPdfServer.jar,通过Java -jar itextPdfServer.jar 命令方式启动。获取签章信息，NetSealClient.getSeal();即根据传递的参数获取用户签章信息。 获取二维码 &emsp;&emsp;上传PDF文件，获取二维码信息，二维码数据包含 businesscode，random（PDF的UUID），optType PDF签章——获取待签章的pdf摘要 &emsp;&emsp;GetPdfData接口，获取待签章的pdf摘要，调用 CertManager.getCertState()，获取用户证书状态。通过http接口调用签章服务，获取摘要。 &emsp;&emsp;获取签章后的PDF，getPdfUrl接口，获取签章后的PDF数据，内部会调用/pdf/signature/merge，签章服务接口，对PDF进行签章处理，然后更新缓存中的PdfParam对象信息。然后通过 /sign/result/get 获取签章结果。/sign/pdf/signed/download 下载已签章文件。 用户注册流程 &emsp;&emsp;管理员通过后台用户管理功能新增用户，然后进入审核，用户审核模块，对刚刚新增的用户，设置为审核通过。然后就可以使用该用户的用户和注册码进行登录了，令牌用户只能使用令牌类型的账号登录，证书用户需要使用单独的SDK app进行登陆 令牌种子 获取令牌种子 接受请求 username,imei,sm2pubkey 获取用户信息，判断用户令牌状态，令牌审核状态，令牌有效状态（是否绑定，已绑定的令牌，请求获取令牌种子，需要先解绑原来的令牌种子） 注销令牌（删除card_info表中的令牌数据，ManagementAPI.logOut） 产生一个32位的安全随机数（申请下载种子） 种子与用户进行绑定(ManagementAPI.bind) 用公钥加密种子 更新用户令牌数据 返回加密后的种子数据，结束 更新令牌种子 &emsp;&emsp;更新令牌种子实质是先注销原来旧的令牌种子，然后重新生成新的令牌种子进行绑定。与获取令牌的中的流程基本相同。 冻结种子 由后台发起，冻结某个用户的种子。username,squenceTime,imei 经过一系列的参数校验 最终调用 ManagementAPI.lockCard，冻结种子 结束，冻结后的种子在解冻之前都无法使用。 解冻种子 由后台发起，冻结某个用户的种子。username,squenceTime,imei 经过一系列的参数校验 最终调用 ManagementAPI.unlockCard，解冻种子 结束，种子解冻之后，有效可是继续使用。 验证令牌 接收请求 username,imei,password 获取用户详细信息，username,imei,token 判断用户令牌种子审核状态，令牌当前是否有效（仅审核通过且有效的状态的令牌才能进行验证。1=激活，2=正常，3=作废，4=未知，） 验证，第一步验证用户卡信息，种子状态，种子使用次数（是否达到最大使用次数限制），校验失败错误次数（是否达到最大错误次数）， 验证令牌，验证密码（事件因子，时间因子，imei，用户密码，挑战码，种子，通过一个计算公式，利用上述因子参与计算，得到令牌，若计算的令牌相同则验证通过。） 记录验证结果入库 验证结束返回验证结果","categories":[],"tags":[{"name":"项目分析MAuth","slug":"项目分析MAuth","permalink":"/tags/项目分析MAuth/"}]}]}